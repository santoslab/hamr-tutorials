// #Sireum

package ProdConsExample.Consumer

import org.sireum._
import art._
import ProdConsExample._
import ProdConsExample.Consumer.{ConsumerThr_i_cons_consumerThr => component}

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class ConsumerThr_i_cons_consumerThr_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  inMessage: Port[ProdCons.Message_i]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](),

    dataOuts = ISZ[art.UPort](),

    eventIns = ISZ[art.UPort](inMessage),

    eventOuts = ISZ[art.UPort]()
  )

  val initialization_api : ConsumerThr_i_Initialization_Api = {
    val api = ConsumerThr_i_Initialization_Api(
      id,
      inMessage.id
    )
    ConsumerThr_i_cons_consumerThr_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : ConsumerThr_i_Operational_Api = {
    val api = ConsumerThr_i_Operational_Api(
      id,
      inMessage.id
    )
    ConsumerThr_i_cons_consumerThr_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    ConsumerThr_i_cons_consumerThr_Bridge.EntryPoints(
      id,

      inMessage.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object ConsumerThr_i_cons_consumerThr_Bridge {

  var c_initialization_api: Option[ConsumerThr_i_Initialization_Api] = None()
  var c_operational_api: Option[ConsumerThr_i_Operational_Api] = None()

  @datatype class EntryPoints(
    ConsumerThr_i_cons_consumerThr_BridgeId : Art.BridgeId,
    inMessage_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: ConsumerThr_i_Initialization_Api,
    operational_api: ConsumerThr_i_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS()

    val eventInPortIds: ISZ[Art.PortId] = IS(inMessage_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS()

    val eventOutPortIds: ISZ[Art.PortId] = IS()

    def initialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: ConsumerThr_i_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      // transpiler friendly filter
      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {
        var r = ISZ[Art.PortId]()
        val opsTriggers = ops.ISZOps(triggers)
        for(e <- receivedEvents) {
          if(opsTriggers.contains(e)) {
            r = r :+ e
          }
        }
        return r
      }

      // fetch received events ordered by highest urgency then earliest arrival-time
      val EventTriggered(receivedEvents) = Art.dispatchStatus(ConsumerThr_i_cons_consumerThr_BridgeId)

      // remove non-dispatching event ports
      val dispatchableEventPorts: ISZ[Art.PortId] =
        if(dispatchTriggers.isEmpty) receivedEvents
        else filter(receivedEvents, dispatchTriggers.get)

      Art.receiveInput(eventInPortIds, dataInPortIds)

      for(portId <- dispatchableEventPorts) {
        if(portId == inMessage_Id){
          val Some(ProdCons.Message_i_Payload(value)) = Art.getValue(inMessage_Id)

          // implement the following in 'component':  def handle_inMessage(api: ConsumerThr_i_Operational_Api, value: ProdCons.Message_i): Unit = {}
          component.handle_inMessage(operational_api, value)
        }
      }

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def finalise(): Unit = {
      // implement the following method in 'component':  def finalise(api: ConsumerThr_i_Operational_Api): Unit = {}
      component.finalise(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: ConsumerThr_i_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      // transpiler friendly filter
      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {
        var r = ISZ[Art.PortId]()
        val opsTriggers = ops.ISZOps(triggers)
        for(e <- receivedEvents) {
          if(opsTriggers.contains(e)) {
            r = r :+ e
          }
        }
        return r
      }

      // fetch received events ordered by highest urgency then earliest arrival-time
      val EventTriggered(receivedEvents) = Art.dispatchStatus(ConsumerThr_i_cons_consumerThr_BridgeId)

      // remove non-dispatching event ports
      val dispatchableEventPorts: ISZ[Art.PortId] =
        if(dispatchTriggers.isEmpty) receivedEvents
        else filter(receivedEvents, dispatchTriggers.get)

      Art.receiveInput(eventInPortIds, dataInPortIds)

      for(portId <- dispatchableEventPorts) {
        if(portId == inMessage_Id){
          val Some(ProdCons.Message_i_Payload(value)) = Art.getValue(inMessage_Id)

          // implement the following in 'component':  def handle_inMessage(api: ConsumerThr_i_Operational_Api, value: ProdCons.Message_i): Unit = {}
          component.handle_inMessage(operational_api, value)
        }
      }

      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}