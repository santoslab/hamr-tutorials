// #Sireum

package ProdConsExample

import org.sireum._
import art._
import art.PortMode._
import art.DispatchPropertyProtocol._
import art.Art.BridgeId._
import art.Art.PortId._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Arch {
  val ProdConsSystem_i_Instance_prod_producerThr : ProdConsExample.Producer.ProducerThr_i_prod_producerThr_Bridge = {
    val outMessage = Port[ProdCons.Message_i] (id = portId"0", name = "ProdConsSystem_i_Instance_prod_producerThr_outMessage", mode = EventOut)

    ProdConsExample.Producer.ProducerThr_i_prod_producerThr_Bridge(
      id = bridgeId"0",
      name = "ProdConsSystem_i_Instance_prod_producerThr",
      dispatchProtocol = Periodic(period = 1000),
      dispatchTriggers = None(),

      outMessage = outMessage
    )
  }
  val ProdConsSystem_i_Instance_cons_consumerThr : ProdConsExample.Consumer.ConsumerThr_i_cons_consumerThr_Bridge = {
    val inMessage = Port[ProdCons.Message_i] (id = portId"1", name = "ProdConsSystem_i_Instance_cons_consumerThr_inMessage", mode = EventIn)

    ProdConsExample.Consumer.ConsumerThr_i_cons_consumerThr_Bridge(
      id = bridgeId"1",
      name = "ProdConsSystem_i_Instance_cons_consumerThr",
      dispatchProtocol = Sporadic(min = 1000),
      dispatchTriggers = None(),

      inMessage = inMessage
    )
  }

  val ad : ArchitectureDescription = {

    ArchitectureDescription(
      components = IS[Art.BridgeId, Bridge] (ProdConsSystem_i_Instance_prod_producerThr, ProdConsSystem_i_Instance_cons_consumerThr),

      connections = IS[Art.ConnectionId, UConnection] (Connection(from = ProdConsSystem_i_Instance_prod_producerThr.outMessage, to = ProdConsSystem_i_Instance_cons_consumerThr.inMessage))
    )
  }
}
