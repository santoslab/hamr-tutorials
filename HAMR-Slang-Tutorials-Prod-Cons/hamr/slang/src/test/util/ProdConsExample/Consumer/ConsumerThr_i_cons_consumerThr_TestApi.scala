// #Sireum

package ProdConsExample.Consumer

import org.sireum._
import art.Art
import ProdConsExample._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait ConsumerThr_i_cons_consumerThr_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.ProdConsSystem_i_Instance_cons_consumerThr)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.ProdConsSystem_i_Instance_cons_consumerThr)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.ProdConsSystem_i_Instance_cons_consumerThr)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.ProdConsSystem_i_Instance_cons_consumerThr)
  }

  /** helper function to set the values of all input ports.
   * @param inMessage payloads for event data port inMessage.
   *   ART currently supports single element event data queues so
   *   only the last element of inMessage will be used
   */
  def put_concrete_inputs(inMessage : ISZ[ProdCons.Message_i]): Unit = {
    for(v <- inMessage){
      put_inMessage(v)
    }
  }


  // setter for in EventDataPort
  def put_inMessage(value : ProdCons.Message_i): Unit = {
    Art.insertInInfrastructurePort(Arch.ProdConsSystem_i_Instance_cons_consumerThr.operational_api.inMessage_Id, ProdCons.Message_i_Payload(value))
  }

}
