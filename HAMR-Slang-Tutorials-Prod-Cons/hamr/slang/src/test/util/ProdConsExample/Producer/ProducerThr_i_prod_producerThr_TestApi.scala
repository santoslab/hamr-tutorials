// #Sireum

package ProdConsExample.Producer

import org.sireum._
import art.Art
import ProdConsExample._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait ProducerThr_i_prod_producerThr_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.ProdConsSystem_i_Instance_prod_producerThr)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.ProdConsSystem_i_Instance_prod_producerThr)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.ProdConsSystem_i_Instance_prod_producerThr)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.ProdConsSystem_i_Instance_prod_producerThr)
  }

  /** helper function to check ProducerThr_i_prod_producerThr's
   * output ports.  Use named arguments to check subsets of the output ports.
   * @param outMessage method that will be called with the payloads to be sent
   *        on the outgoing event data port 'outMessage'.
   */
  def check_concrete_output(outMessage: ISZ[ProdCons.Message_i] => B): Unit = {
    var testFailures: ISZ[ST] = ISZ()

    var outMessageValue: ISZ[ProdCons.Message_i] = ISZ()
    // TODO: event data port getter should return all of the events/payloads
    //       received on event data ports when queue sizes > 1 support is added
    //       to ART
    if(get_outMessage().nonEmpty) { outMessageValue = outMessageValue :+ get_outMessage().get }
    if(!outMessage(outMessageValue)) {
      testFailures = testFailures :+ st"'outMessage' did not match expected: received ${outMessageValue.size} events with the following payloads ${outMessageValue}"
    }

    assert(testFailures.isEmpty, st"${(testFailures, "\n")}".render)
  }


  // getter for out EventDataPort
  def get_outMessage(): Option[ProdCons.Message_i] = {
    val value: Option[ProdCons.Message_i] = get_outMessage_payload() match {
      case Some(ProdCons.Message_i_Payload(v)) => Some(v)
      case Some(v) => halt(s"Unexpected payload on port outMessage.  Expecting 'ProdCons.Message_i_Payload' but received ${v}")
      case _ => None[ProdCons.Message_i]()
    }
    return value
  }

  // payload getter for out EventDataPort
  def get_outMessage_payload(): Option[ProdCons.Message_i_Payload] = {
    return Art.observeOutInfrastructurePort(Arch.ProdConsSystem_i_Instance_prod_producerThr.initialization_api.outMessage_Id).asInstanceOf[Option[ProdCons.Message_i_Payload]]
  }

}
